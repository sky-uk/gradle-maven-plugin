apply plugin: 'maven-publish'
apply plugin: 'signing'

def gradlePluginVersion = project.hasProperty('mavPluginVersion') ? project.mavPluginVersion : 'master'
apply from: "https://raw.githubusercontent.com/sky-uk/gradle-maven-plugin/${gradlePluginVersion}/utils.gradle"
apply from: "https://raw.githubusercontent.com/sky-uk/gradle-maven-plugin/${gradlePluginVersion}/artifact-javadoc-handler.gradle"
apply from: "https://raw.githubusercontent.com/sky-uk/gradle-maven-plugin/${gradlePluginVersion}/artifact-pom-manager.gradle"

File secretPropsFile = project.rootProject.file('local.properties')

if (secretPropsFile.exists()) {
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        project.ext[name] = value
    }
} else {
    project.ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
    project.ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
    project.ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
}

project.afterEvaluate {
    publishing {
        publications {
            mavenPublish(MavenPublication) {
                if (project.plugins.findPlugin("com.android.library")) {
                    from components.release
                    artifact androidJavadocsJar
                    artifact androidSourcesJar
                } else {
                    artifact jar
                    artifact sourcesJar
                    artifact javadocJar
                }
                decoratePom(pom)
            }
        }

        repositories {
            def isToRemoteRepo = getBooleanProperty("mavPublishToRemoteRepo")
            def isToInternalRepo = getBooleanProperty("mavPublishToInternalRepo")
            def isToMavenLocal = getBooleanProperty("mavPublishToMavenLocal")

            if (isToRemoteRepo) {
                maven {
                    credentials {
                        username getStringProperty("mavRemoteRepoUser")
                        password getStringProperty("mavRemoteRepoPassword")
                    }
                    url = getStringProperty("mavRepoRemoteUrl")
                }
            }

            if (isToInternalRepo) {
                maven {
                    url = getStringProperty("mavRepoInternalUrl")
                }
            }

            if (isToMavenLocal || (!isToInternalRepo && !isToRemoteRepo)) {
                mavenLocal()
            }
        }
    }

    if (getBooleanProperty("mavSigning")) {
        signing {
            sign publishing.publications
        }
    }
}
